#standardSQL

-- Aim: "Preroll delay" a.k.a time to first frame of preroll ads
-- Things that are certain about this query:
-- - from the beginning, two pluginVersions have to be considered
-- - IMA only
-- - Prerolls only
-- - Only sessions with video_views and without ad_timeouts will be used.

WITH 

#
## VALID SESSIONS
#
-- Two dates
  d1 AS (SELECT '2017_12_25' AS table),
  d2 AS (SELECT '2018_01_01' AS table),
  
-- Initial Restrictions:
-- - 2 pluginVersions
-- - 2 dates
-- - Web only
-- - IMA only
-- - Prerolls only
-- - video_views > 0
-- - ad_timeouts = 0
  sessions_date_1 AS
    (SELECT
      session,
      APPROX_TOP_SUM(session, IF(ad_timeouts IS NULL, 0, ad_timeouts), 1)[OFFSET(0)] AS adTimeoutCount
    FROM
      `brightcove-rna-master.session_statistics.sessions_*`
    WHERE
      _TABLE_SUFFIX = (SELECT table FROM d1)
      AND platform = 'video-js'
      AND web_ad_plugin = 'ima3'
      # only include sessions with IMA prerolls
      AND web_ad_prerolls IS NOT NULL
      AND web_ad_prerolls > 0
      AND web_ad_pluginVersion IS NOT NULL
      AND web_ad_pluginVersion IN ('2.20.2', '2.20.3')
      # only include sessions with valid video_views
      AND video_views IS NOT NULL
      AND video_views > 0
    GROUP BY
      session
    HAVING
      adTimeoutCount.sum = 0),

  sessions_date_2 AS
    (SELECT
      session,
      APPROX_TOP_SUM(session, IF(ad_timeouts IS NULL, 0, ad_timeouts), 1)[OFFSET(0)] AS adTimeoutCount
    FROM
      `brightcove-rna-master.session_statistics.sessions_*`
    WHERE
      _TABLE_SUFFIX = (SELECT table FROM d2)
      AND platform = 'video-js'
      AND web_ad_plugin = 'ima3'
      # only include sessions with IMA prerolls
      AND web_ad_prerolls IS NOT NULL
      AND web_ad_prerolls > 0
      AND web_ad_pluginVersion IS NOT NULL
      AND web_ad_pluginVersion IN ('2.20.2', '2.20.3')
      # only include sessions with valid video_views
      AND video_views IS NOT NULL
      AND video_views > 0
    GROUP BY
      session
    HAVING
      adTimeoutCount.sum = 0),

#
## USEFUL AD END EVENTS
#

-- Get the IMA preroll ad end events
-- Needed information: prerollDelay, session, player, pluginVersion
  ad_ends_date_1 AS
    (SELECT
      session,
      player,
      CAST( JSON_EXTRACT_SCALAR(web_ad_info, '$.prerollDelay') AS INT64) AS prerollDelay,
      JSON_EXTRACT_SCALAR(web_ad_info, '$.pluginVersion') AS pluginVersion

    FROM `brightcove-rna-master.collector_logs.production_collector_logs_*`

    WHERE
      _TABLE_SUFFIX = (SELECT table FROM d1)
      AND platform = 'video-js'
      AND event = 'ad_mode_complete'
      AND web_ad_info IS NOT NULL
      AND JSON_EXTRACT_SCALAR(web_ad_info, '$.plugin') = 'ima3'
      # Only take adend events for prerolls
      AND JSON_EXTRACT_SCALAR(web_ad_info, '$.adType') = 'preroll'
      AND JSON_EXTRACT_SCALAR(web_ad_info, '$.pluginVersion') IS NOT NULL
      AND JSON_EXTRACT_SCALAR(web_ad_info, '$.pluginVersion') IN ('2.20.2', '2.20.3')
      AND JSON_EXTRACT_SCALAR(web_ad_info, '$.prerollDelay') IS NOT NULL),

  ad_ends_date_2 AS
    (SELECT
      session,
      player,
      CAST( JSON_EXTRACT_SCALAR(web_ad_info, '$.prerollDelay') AS INT64) AS prerollDelay,
      JSON_EXTRACT_SCALAR(web_ad_info, '$.pluginVersion') AS pluginVersion

    FROM `brightcove-rna-master.collector_logs.production_collector_logs_*`

    WHERE
      _TABLE_SUFFIX = (SELECT table FROM d2)
      AND platform = 'video-js'
      AND event = 'ad_mode_complete'
      AND web_ad_info IS NOT NULL
      AND JSON_EXTRACT_SCALAR(web_ad_info, '$.plugin') = 'ima3'
      # Only take adend events for prerolls
      AND JSON_EXTRACT_SCALAR(web_ad_info, '$.adType') = 'preroll'
      AND JSON_EXTRACT_SCALAR(web_ad_info, '$.pluginVersion') IS NOT NULL
      AND JSON_EXTRACT_SCALAR(web_ad_info, '$.pluginVersion') IN ('2.20.2', '2.20.3')
      AND JSON_EXTRACT_SCALAR(web_ad_info, '$.prerollDelay') IS NOT NULL),

#
## VALIDATE AD ENDS BY SESSION
#

-- Only keep events where its associated session fits our restrictions
  session_valid_ad_ends_date_1 AS
    (SELECT DISTINCT
      player,
      prerollDelay,
      pluginVersion,
      # Assigns a row number to each row that has the same session
      ROW_NUMBER() OVER (PARTITION BY session) AS rowNum
    FROM
      ad_ends_date_1
    WHERE
      # This will only pick ad ends from the sessions we know are valid
      session IN (SELECT session FROM sessions_date_1)
      AND pluginVersion IN ('2.20.2', '2.20.3')),

  session_valid_ad_ends_date_2 AS
    (SELECT DISTINCT
      player,
      prerollDelay,
      pluginVersion,
      ROW_NUMBER() OVER (PARTITION BY session) AS rowNum
    FROM
      ad_ends_date_2 
    WHERE
      session IN (SELECT session FROM sessions_date_2)
      AND pluginVersion IN ('2.20.2', '2.20.3')),


#
## USEFUL PLAYERS
#
-- We want to compare players that changed pluginVersions between the two dates
  player_valid_ad_ends AS
    (SELECT
      r1.prerollDelay AS prerollDelay_date_1,
      r1.pluginVersion AS pluginVersion_date_1,
      r1.rowNum AS rowNum_date_1,

      r2.prerollDelay AS prerollDelay_date_2,
      r2.pluginVersion AS pluginVersion_date_2,
      r2.rowNum AS rowNum_date_2
    FROM
      # We only pick the "first" preroll in the session for both tables
      (SELECT * FROM session_valid_ad_ends_date_1 WHERE rowNum = 1) AS r1
      JOIN
      (SELECT * FROM session_valid_ad_ends_date_2 WHERE rowNum = 1) AS r2
      # The results of the join are the events associated with players that
      # are seen in both dates
      USING (player)
    WHERE
      # We only care about players that changed pluginVersions between
      # the two dates. We double check that only the first preroll per session
      # is picked.
      r1.pluginVersion != r2.pluginVersion
      AND r1.pluginVersion IN ('2.20.2', '2.20.3')
      AND r2.pluginVersion IN ('2.20.2', '2.20.3')
      AND r1.rowNum = 1 
      AND r2.rowNum = 1),

-- Combine the results for the two dates into 2 columns, as we don't need to keep them separate at this point.
  finalPrerolls AS
    (SELECT DISTINCT
      *
    FROM
      (SELECT DISTINCT
        pluginVersion_date_1 AS pluginVersion,
        prerollDelay_date_1 AS prerollDelay
      FROM
        player_valid_ad_ends
      WHERE
        rowNum_date_1 = 1)
      UNION ALL
      (SELECT DISTINCT
        pluginVersion_date_2 AS pluginVersion,
        prerollDelay_date_2 AS prerollDelay
      FROM
        player_valid_ad_ends
      WHERE
        rowNum_date_2 = 1)),

-- Find the variance, percentiles, total number of events for each pluginVersion
  pluginVersionQuartiles AS
    (SELECT
      pluginVersion,
      # variance for the plugin version
      VAR_SAMP(prerollDelay) AS variance,
      # Split the prerollDelay values for the plugin version into percentiles
      APPROX_QUANTILES(prerollDelay, 100 IGNORE NULLS) AS percentiles,
      # the number of events that were used
      COUNT(1) AS numPrerolls
    FROM
      finalPrerolls
    GROUP BY
      pluginVersion
    HAVING
      pluginVersion IN ('2.20.2', '2.20.3'))

-- Presentation:
-- The 50th, 67th, 90th, 95th and 100th percentiles are given
-- along with the number of prerolls and variance for each plugin version
SELECT
  pluginVersion,
  # total number of prerolls
  # in this case, only the first preroll in the session
  # is picked, so this is also the number of sessions
  numPrerolls,
  # variance
  ROUND(variance, 2) AS variancePrerollDelay,
  # 50th percentile
  percentiles[OFFSET(50)] AS percentile_50,
  # 67th percentile
  percentiles[OFFSET(67)] AS percentile_67,
  # 90th percentile
  percentiles[OFFSET(90)] AS percentile_90,
  # 95th percentile
  percentiles[OFFSET(95)] AS percentile_95,
  # 100th percentile
  percentiles[OFFSET(100)] AS percentile_100,
  # values in seconds
  ROUND ( (variance / 1000), 2) AS variDelayInSec,
  ROUND ( (percentiles[OFFSET(1)] / 1000), 2) AS percentile_1_s,
  ROUND ( (percentiles[OFFSET(5)] / 1000), 2) AS percentile_5_s,
  ROUND ( (percentiles[OFFSET(10)] / 1000), 2) AS percentile_10_s,
  ROUND ( (percentiles[OFFSET(33)] / 1000), 2) AS percentile_33_s,
  ROUND ( (percentiles[OFFSET(50)] / 1000), 2) AS percentile_50_s,
  ROUND ( (percentiles[OFFSET(67)] / 1000), 2) AS percentile_67_s,
  ROUND ( (percentiles[OFFSET(90)] / 1000), 2) AS percentile_90_s,
  ROUND ( (percentiles[OFFSET(95)] / 1000), 2) AS percentile_95_s,
  ROUND ( (percentiles[OFFSET(100)] / 1000), 2) AS percentile_100_s

FROM
  pluginVersionQuartiles
ORDER BY pluginVersion ASC
